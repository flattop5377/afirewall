##
# IPV6 Rules.  These match the IPV4 rules
#
#
table ip6 a-firewall-inbound-ipv6 {

{% if inbound.ssh %}{% include 'ipv6/inbound/ssh.rules' %}{% endif %}
{% if inbound.smtp %}{% include 'ipv6/inbound/smtp.rules' %}{% endif %}
{% if inbound.tcp2194 %}{% include 'ipv6/inbound/tcp2194.rules' %}{% endif %}
{% if inbound.http %}{% include 'ipv6/inbound/http.rules' %}{% endif %}
{% if inbound.https %}{% include 'ipv6/inbound/https.rules' %}{% endif %}
{% if inbound.orport %}{% include 'ipv6/inbound/orport.rules' %}{% endif %}
{% if inbound.dirport %}{% include 'ipv6/inbound/dirport.rules' %}{% endif %}
{% if inbound.syslogtls %}{% include 'ipv6/inbound/syslogtls.rules' %}{% endif %}
{% if inbound.baculadirector %}{% include 'ipv6/inbound/baculadirector.rules' %}{% endif %}
{% if inbound.baculafiledaemon %}{% include 'ipv6/inbound/baculafiledaemon.rules' %}{% endif %}
{% if inbound.baculastoragedaemon %}{% include 'ipv6/inbound/baculastoragedaemon.rules' %}{% endif %}
{% if inbound.bitcoin %}{% include 'ipv6/inbound/bitcoin.rules' %}{% endif %}
{% if inbound.udp1514 %}{% include 'ipv6/inbound/udp1514.rules' %}{% endif %}
{% if inbound.tor %}{% include 'ipv6/inbound/tor.rules' %}{% endif %}
{% if inbound.btc %}{% include 'ipv6/inbound/btc.rules' %}{% endif %}


  #############################################################################
  #
  ## DEFAULT rules
  #
  # Drop everything
  #
  #############################################################################

  ##
  # Drop all traffic that hasn't been accepted by priority 10 filters
  #
  chain DROP_BY_DEFAULT {
    type filter hook input priority 20; policy drop;

{% if inbound.ssh %}    tcp dport 22 jump ACCEPT_SSH{% endif %}
{% if inbound.smtp %}    tcp dport 25 jump ACCEPT_SMTP{% endif %}
{% if inbound.tcp2194 %}    tcp dport 2194 jump ACCEPT_TCP2194{% endif %}
{% if inbound.http %}    tcp dport 80 jump ACCEPT_HTTP{% endif %}
{% if inbound.https %}    tcp dport 443 jump ACCEPT_HTTPS{% endif %}
{% if inbound.syslogtls %}    tcp dport 6514 jump ACCEPT_SYSLOGTLS{% endif %}
{% if inbound.baculadirector %}    tcp dport 9101 jump ACCEPT_BACULADIRECTOR{% endif %}
{% if inbound.baculafiledaemon %}    tcp dport 9102 jump ACCEPT_BACULAFILEDAEMON{% endif %}
{% if inbound.baculastoragedaemon %}    tcp dport 9103 jump ACCEPT_BACULASTORAGEDAEMON{% endif %}
{% if inbound.udp1514 %}    udp dport 1514 jump ACCEPT_UDP1514{% endif %}
{% if inbound.tor %}    tcp dport 9001 jump ACCEPT_TOR{% endif %}
{% if inbound.tor %}    tcp dport 9030 jump ACCEPT_TOR{% endif %}
{% if inbound.btc %}    tcp dport 8333 jump ACCEPT_TOR{% endif %}

{% if outbound.dhcp %}    udp sport 67 ct state established accept{% endif %}
{% if outbound.dns %}    udp sport 53 ct state established accept{% endif %}
{% if outbound.http %}    tcp sport 80 ct state established accept{% endif %}
{% if outbound.https %}    tcp sport 443 ct state established accept{% endif %}
{% if outbound.ntp %}    udp sport 123 ct state established accept{% endif %}
{% if outbound.smtp %}    tcp sport 25 ct state established accept{% endif %}
{% if outbound.tcp2194 %}    tcp sport 2194 ct state established accept{% endif %}
{% if outbound.syslogtls %}    tcp sport 6514 ct state established accept{% endif %}
{% if outbound.baculadirector %}    tcp sport 9101 ct state established accept{% endif %}
{% if outbound.baculafiledaemon %}    tcp sport 9102 ct state established accept{% endif %}
{% if outbound.baculastoragedaemon %}    tcp sport 9103 ct state established accept{% endif %}
{% if outbound.udp2514 %}    udp sport 2514 ct state established accept{% endif %}
{% if outbound.ssh %}    tcp sport 22 ct state established accept{% endif %}
{% if outbound.tor %}    meta skuid debian-tor ct state established accept{% endif %}
{% if outbound.btc %}    meta skuid btc ct state established accept{% endif %}

    ip protocol icmp jump VALID_ICMP

  }

  #############################################################################
  #
  ## Block Private Subnet Spoofing
  #
  #############################################################################

  # Count the number of packets dropped by the SPOOFING chain
  counter NUMBER_OF_SPOOFS_DROPPED {
  }

  ##
  # We should not receive any traffix from private subnets on a Public
  # interface
  #
  # Reference:
  #   https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml
  chain SPOOFING {
    type filter hook input priority mangle; policy accept;

{% for network in SPOOFED_NETWORKS %}    ip saddr {{ network }} counter name NUMBER_OF_SPOOFS_DROPPED drop
{% endfor %}
  }

  # Count the number of packets dropped by the INVALID_FLAGS chain
  counter NUMBER_OF_INVALID_FLAGS_DROPPED {
  }

  #############################################################################
  #
  ## Invalid TCP Flag rules
  #
  #############################################################################

  ##
  # Accept all traffix except invalid traffix.
  #
  # Based on (it's insane that in 2024 it's necessary to currate the references that are so hard to find)
  #   apf-firewall: https://www.rfxn.com/projects/advanced-policy-firewall/
  #   blog: https://www.sobyte.net/post/2022-04/understanding-netfilter-and-iptables/:
  #   netfileter wiki: https://wiki.nftables.org/wiki-nftables/index.php/Netfilter_hooks
  #   message thread: https://git.netfilter.org/nftables/log/include/expression.h?id=4e0026dc8d8693aaf2caf8df6d657a116734e84e&showmsg=1
  #   netfilter (iptables 2.4) documentation: https://netfilter.org/documentation/HOWTO/packet-filtering-HOWTO-7.html
  #   netfiler quick reference: https://wiki.nftables.org/wiki-nftables/index.php/Quick_reference-nftables_in_10_minutes#Ct
  #   blog: https://andreafortuna.org/2019/05/08/iptables-a-simple-cheatsheet/
  chain INVALID_FLAGS {
    type filter hook input priority raw; policy accept;
      # Drop segments that have no TCP flags: https://www.rfc-editor.org/rfc/rfc9293.html
      # FLAGS  = 00000000
      # MASK   = 11111111
      # RESULT = 00000000
      tcp flags == 0x0 counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have both FIN and SYN flags set
      # FLAGS  = 00000011
      # MASK   = 00000011
      # RESULT = 00000011
      tcp flags == 0x3 counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have FIN, SYN, RST, ACK, URG flags set (REDUNDANT)
      # FLAGS  = 00110111
      # MASK   = 00110111
      # RESULT = 00110111
      # tcp flags == 0x37 counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have URG, ACK, PSH, RST, SYN, FIN flags set (REDUNDANT)
      # FLAGS  = 00111111
      # MASK   = 00111111
      # RESULT = 00111111
      # tcp flags == 0x3F counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have all TCP flags set (REDUNDANT)
      # FLAGS  = 11111111
      # MASK   = 11111111
      # RESULT = 11111111
      # tcp flags == 0x255 counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have both SYN and RST flags set
      # FLAGS  = 00000110
      # MASK   = 00000110
      # RESULT = 00000110
      tcp flags == 0x6 counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have both FIN and RST flags set
      # FLAGS  = 00000101
      # MASK   = 00000101
      # RESULT = 00000101
      tcp flags == 0x5 counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that only have FIN
      # FLAGS  = 00000001
      # MASK   = 11111111
      # RESULT = 00000001
      tcp flags == 0x1 counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have FIN without ACK (REDUNDANT)
      # FLAGS  = 00000001
      # MASK   = 00010001
      # RESULT = 00000001
      # tcp flags fin / fin,ack counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have URG without ACK
      # FLAGS  = 00100000
      # MASK   = 00110000
      # RESULT = 00100000
      tcp flags urg / urg,ack counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have PSH without ACK
      # FLAGS  = 00001000
      # MASK   = 00011000
      # RESULT = 00001000
      tcp flags psh / psh,ack counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have FIN, PSH, and URG flags set
      # FLAGS  = 00101001
      # MASK   = 00101001
      # RESULT = 00101001
      tcp flags == 0x29 counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop conntrack segments with INVALID state
      # https://wiki.nftables.org/wiki-nftables/index.php/Matching_connection_tracking_stateful_metainformation
      ct state invalid counter drop
  }

  # Count the number of packets with a source or destination port of 0
  counter NUMBER_OF_PORT_ZERO_SEGMENTS_DROPPED {
  }

  chain PORT_ZERO {
    type filter hook input priority raw;

      tcp dport 0 counter name NUMBER_OF_PORT_ZERO_SEGMENTS_DROPPED drop
      tcp sport 0 counter name NUMBER_OF_PORT_ZERO_SEGMENTS_DROPPED drop
      udp dport 0 counter name NUMBER_OF_PORT_ZERO_SEGMENTS_DROPPED drop
      udp sport 0 counter name NUMBER_OF_PORT_ZERO_SEGMENTS_DROPPED drop
  }
}

table ip6 a-firewall-outbound-ipv6 {

{% if outbound.dhcp %}{% include 'ipv6/outbound/dhcp.rules' %}{% endif %}
{% if outbound.dns %}{% include 'ipv6/outbound/dns.rules' %}{% endif %}
{% if outbound.http %}{% include 'ipv6/outbound/http.rules' %}{% endif %}
{% if outbound.https %}{% include 'ipv6/outbound/https.rules' %}{% endif %}
{% if outbound.ntp %}{% include 'ipv6/outbound/ntp.rules' %}{% endif %}
{% if outbound.smtp %}{% include 'ipv6/outbound/smtp.rules' %}{% endif %}
{% if outbound.tcp2194 %}{% include 'ipv6/outbound/tcp2194.rules' %}{% endif %}
{% if outbound.syslogtls %}{% include 'ipv6/outbound/syslogtls.rules' %}{% endif %}
{% if outbound.baculadirector %}{% include 'ipv6/outbound/baculadirector.rules' %}{% endif %}
{% if outbound.baculafiledaemon %}{% include 'ipv6/outbound/baculafiledaemon.rules' %}{% endif %}
{% if outbound.baculastoragedaemon %}{% include 'ipv6/outbound/baculastoragedaemon.rules' %}{% endif %}
{% if outbound.udp1514 %}{% include 'ipv6/outbound/udp1514.rules' %}{% endif %}
{% if outbound.ssh %}{% include 'ipv6/outbound/ssh.rules' %}{% endif %}
{% if outbound.tor %}{% include 'ipv6/outbound/tor.rules' %}{% endif %}
{% if outbound.btc %}{% include 'ipv6/outbound/btc.rules' %}{% endif %}

  #############################################################################
  #
  ## Drop by default
  #
  # If the output traffic isn't specifically accpeted by priority 10 rules,
  # this rule will drop the traffic.  EXCEPT if the connection is established.
  #
  #############################################################################
  chain DROP_BY_DEFAULT {
    type filter hook output priority filter; policy drop;

{% if inbound.ssh %}    tcp sport 22 ct state established accept{% endif %}
{% if inbound.smtp %}    tcp sport 25 ct state established accept{% endif %}
{% if inbound.tcp2914 %}    tcp sport 2194 ct state established accept{% endif %}
{% if inbound.http %}    tcp sport 80 ct state established accept{% endif %}
{% if inbound.https %}    tcp sport 443 ct state established accept{% endif %}
{% if inbound.syslogtls %}    tcp sport 6514 ct state established accept{% endif %}
{% if inbound.baculadirector %}    tcp sport 9101 ct state established accept{% endif %}
{% if inbound.baculafiledaemon %}    tcp sport 9102 ct state established accept{% endif %}
{% if inbound.baculastoragedaemon %}    tcp sport 9103 ct state established accept{% endif %}
{% if inbound.udp1514 %}    udp sport 1514 ct state established accept{% endif %}
{% if inbound.tor %}    tcp sport 9001 ct state established accept{% endif %}
{% if inbound.tor %}    tcp sport 9030 ct state established accept{% endif %}
{% if inbound.btc %}    tcp sport 8333 ct state established accept{% endif %}

{% if outbound.dhcp %}    udp dport 67 jump ACCEPT_DHCP{% endif %}
{% if outbound.dhcp %}    udp dport 53 jump ACCEPT_DNS{% endif %}
{% if outbound.http %}    tcp dport 80 jump ACCEPT_HTTP{% endif %}
{% if outbound.https %}    tcp dport 443 jump ACCEPT_HTTPS{% endif %}
{% if outbound.ntp %}    udp dport 123 jump ACCEPT_NTP{% endif %}
{% if outbound.smtp %}    tcp dport 25 jump ACCEPT_SMTP{% endif %}
{% if outbound.tcp2194 %}    tcp dport 2194 jump ACCEPT_TCP2194{% endif %}
{% if outbound.syslogtls %}    tcp dport 6514 jump ACCEPT_SYSLOGTLS{% endif %}
{% if outbound.baculadirector %}    tcp dport 9101 jump ACCEPT_BACULADIRECTOR{% endif %}
{% if outbound.baculafiledaemon %}    tcp dport 9102 jump ACCEPT_BACULAFILEDAEMON{% endif %}
{% if outbound.baculastoragedaemon %}    tcp dport 9103 jump ACCEPT_BACULASTORAGEDAEMON{% endif %}
{% if outbound.ssh %}    tcp dport 22 jump ACCEPT_SSH{% endif %}
{% if outbound.tor %}    meta skuid debian-tor jump ACCEPT_TOR{% endif %}
{% if outbound.btc %}    meta skuid btc jump ACCEPT_TOR{% endif %}

  }

  # Count the number of packets dropped by the INVALID_FLAGS chain
  counter NUMBER_OF_INVALID_FLAGS_DROPPED {
  }

  chain INVALID_FLAGS {
    type filter hook output priority filter;

      # Drop segments that have no TCP flags: https://www.rfc-editor.org/rfc/rfc9293.html
      # FLAGS  = 00000000
      # MASK   = 11111111
      # RESULT = 00000000
      tcp flags == 0x0 counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have both FIN and SYN flags set
      # FLAGS  = 00000011
      # MASK   = 00000011
      # RESULT = 00000011
      tcp flags == 0x3 counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have both SYN and RST flags set
      # FLAGS  = 00000110
      # MASK   = 00000110
      # RESULT = 00000110
      tcp flags == 0x6 counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have both FIN and RST flags set
      # FLAGS  = 00000101
      # MASK   = 00000101
      # RESULT = 00000101
      tcp flags == 0x5 counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have FIN without ACK
      # FLAGS  = 00000001
      # MASK   = 00010001
      # RESULT = 00000001
      tcp flags fin / fin,ack counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have URG without ACK
      # FLAGS  = 00100000
      # MASK   = 00110000
      # RESULT = 00100000
      tcp flags urg / urg,ack counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop segments that have PSH without ACK
      # FLAGS  = 00001000
      # MASK   = 00011000
      # RESULT = 00001000
      tcp flags psh / psh,ack counter name NUMBER_OF_INVALID_FLAGS_DROPPED drop

      # Drop conntrack segments with INVALID state
      ct state invalid counter drop
  }

  #############################################################################
  #
  ## ICMP Rules
  #
  #############################################################################

  ##
  # ICMP rate limit per source
  #
  set icmp_rate_limit {
    type ipv6_addr
    timeout 60s
    flags dynamic
  }

  ##
  # Only allow valid ICMP inbound traffix.
  #   Drop all traffix except what's specifically allowed
  #
  # Sources:
  #   https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml
  chain VALID_ICMP {
    icmp type echo-reply update @icmp_rate_limit { ip6 saddr limit rate 10/second } accept
    icmp type destination-unreachable update @icmp_rate_limit { ip6 saddr limit rate 10/second } accept
    icmp type source-quench update @icmp_rate_limit { ip6 saddr limit rate 10/second } accept
    icmp type redirect update @icmp_rate_limit { ip6 saddr limit rate 10/second } accept
    icmp type echo-request update @icmp_rate_limit { ip6 saddr limit rate 10/second } accept
    icmp type time-exceeded update @icmp_rate_limit { ip6 saddr limit rate 10/second } accept
    icmp type parameter-problem update @icmp_rate_limit { ip6 saddr limit rate 10/second } accept
    icmp type timestamp-request update @icmp_rate_limit { ip6 saddr limit rate 10/second } accept
    icmp type timestamp-reply update @icmp_rate_limit { ip6 saddr limit rate 10/second } accept
    icmp type info-request update @icmp_rate_limit { ip6 saddr limit rate 10/second } accept
    icmp type info-reply update @icmp_rate_limit { ip6 saddr limit rate 10/second } accept
    icmp type address-mask-request update @icmp_rate_limit { ip6 saddr limit rate 10/second } accept
    icmp type address-mask-reply update @icmp_rate_limit { ip6 saddr limit rate 10/second } accept
    icmp type router-advertisement update @icmp_rate_limit { ip6 saddr limit rate 10/second } accept
    icmp type router-solicitation update @icmp_rate_limit { ip6 saddr limit rate 10/second } accept
  }

}
